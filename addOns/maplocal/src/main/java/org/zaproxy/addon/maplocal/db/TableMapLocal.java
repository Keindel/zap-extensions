package org.zaproxy.addon.maplocal.db;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.parosproxy.paros.db.DatabaseException;
import org.parosproxy.paros.db.DbUtils;
import org.parosproxy.paros.db.paros.ParosAbstractTable;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class TableMapLocal extends ParosAbstractTable {

    private static final Logger LOGGER = LogManager.getLogger(TableMapLocal.class);

    private static final String TABLE_NAME = "MAP_LOCAL";

    private static final String MAPLOCAL_ID = "MAPLOCAL_ID";
    private static final String URL_STRING = "URL_STRING";
    private static final String MATCH = "MATCH";
    private static final String IGNORE_CASE = "IGNORE_CASE";
    private static final String LOCAL_PATH = "LOCAL_PATH";


    private PreparedStatement psInsert;
    private PreparedStatement psSelect;
    private PreparedStatement psUpdate;
    private PreparedStatement psDeleteMapLocal;


    private CallableStatement psGetIdLastInsert;

    @Override
    protected void reconnect(Connection conn) throws DatabaseException {
        try {
            if (!DbUtils.hasTable(conn, TABLE_NAME)) {
                DbUtils.execute(
                        conn,
                        "CREATE CACHED TABLE " + TABLE_NAME
                                + " ("
                                + MAPLOCAL_ID + " integer generated by default as identity (start with 1), "
                                + URL_STRING + " varchar(1024) NOT NULL, "
                                + MATCH + " varchar(32) NOT NULL, "
                                + IGNORE_CASE + " boolean NOT NULL, "
                                + LOCAL_PATH + " varchar(1024) NOT NULL "
                                + ")");
            }

            psSelect =
                    conn.prepareStatement(
                            "SELECT TOP 1 * FROM " + TABLE_NAME + " WHERE " + MAPLOCAL_ID + " = ?");

            psInsert =
                    conn.prepareStatement(
                            "INSERT INTO " + TABLE_NAME
                                    + " ("
                                    + URL_STRING + ","
                                    + MATCH + ","
                                    + IGNORE_CASE + ","
                                    + LOCAL_PATH
                                    + ") VALUES (?, ?, ?, ?)");
            psGetIdLastInsert = conn.prepareCall("CALL IDENTITY();");
            psDeleteMapLocal =
                    conn.prepareStatement(
                            "DELETE FROM " + TABLE_NAME + " WHERE " + MAPLOCAL_ID + " = ?");

            psUpdate =
                    conn.prepareStatement(
                            "UPDATE " + TABLE_NAME
                                    + " SET "
                                    + URL_STRING + " = ?, "
                                    + MATCH + " = ?, "
                                    + IGNORE_CASE + " = ?, "
                                    + LOCAL_PATH + " = ? "
                                    + "WHERE " + MAPLOCAL_ID + " = ?");
        } catch (SQLException e) {
            throw new DatabaseException(e);
        }
    }

    public synchronized RecordMapLocal read(int mapLocId) throws DatabaseException {
        try {
            psSelect.setInt(1, mapLocId);
            try (ResultSet rs = psSelect.executeQuery()) {
                return build(rs);
            }
        } catch (Exception e) {
            throw new DatabaseException(e);
        }
    }

    public synchronized RecordMapLocal write(
            String urlString,
            String match,
            boolean ignoreCase,
            String localPath)
            throws DatabaseException {

        try {
            psInsert.setString(1, urlString);
            psInsert.setString(2, match);
            psInsert.setBoolean(3, ignoreCase);
            psInsert.setString(4, localPath);
            psInsert.executeUpdate();

            int id;
            try (ResultSet rs = psGetIdLastInsert.executeQuery()) {
                rs.next();
                id = rs.getInt(1);
            }
            return read(id);
        } catch (SQLException e) {
            throw new DatabaseException(e);
        }
    }

    private RecordMapLocal build(ResultSet rs) throws DatabaseException {
        try {
            RecordMapLocal recordMapLocal = null;
            if (rs.next()) {
                recordMapLocal =
                        new RecordMapLocal(
                                rs.getInt(MAPLOCAL_ID),
                                rs.getString(URL_STRING),
                                rs.getString(MATCH),
                                rs.getBoolean(IGNORE_CASE),
                                rs.getString(LOCAL_PATH));
            }
            return recordMapLocal;
        } catch (SQLException e) {
            throw new DatabaseException(e);
        }
    }

    public synchronized void deleteMapLocal(int mapLocId) throws DatabaseException {
        try {
            psDeleteMapLocal.setInt(1, mapLocId);
            psDeleteMapLocal.execute();
        } catch (SQLException e) {
            throw new DatabaseException(e);
        }
    }

    public synchronized void update(
            int mapLocId,
            String urlString,
            String match,
            boolean ignoreCase,
            String localPath)
            throws DatabaseException {

        try {
            psUpdate.setString(1, urlString);
            psUpdate.setString(2, match);
            psUpdate.setBoolean(3, ignoreCase);
            psUpdate.setString(4, localPath);
            psUpdate.setInt(5, mapLocId);
            psUpdate.executeUpdate();
        } catch (SQLException e) {
            throw new DatabaseException(e);
        }
    }

    public List<Integer> getMapLocalList() throws DatabaseException {
        try {
            try (PreparedStatement psReadScan =
                         getConnection()
                                 .prepareStatement("SELECT " + MAPLOCAL_ID + " FROM " + TABLE_NAME)) {

                List<Integer> list = new ArrayList<>();
                try (ResultSet rs = psReadScan.executeQuery()) {
                    while (rs.next()) {
                        list.add(rs.getInt(MAPLOCAL_ID));
                    }
                }
                return list;
            }
        } catch (SQLException e) {
            throw new DatabaseException(e);
        }
    }
}
